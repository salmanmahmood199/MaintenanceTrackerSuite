1. Enable billing in your validation/schema layer
File: shared/schema.ts

ts
Copy
Edit
// before
permissions: z
  .array(z.enum(["place_ticket", "accept_ticket"]))
  .min(1),

// after: add "billing"
permissions: z
  .array(z.enum([
    "place_ticket",
    "accept_ticket",
    "billing",          // ← new
  ]))
  .min(1),
2. Add billing to your form’s initial state
Depending on whether you’re using React useState or Formik/React Hook Form, locate where you set up the blank/new-sub-admin values.

ts
Copy
Edit
// e.g. in CreateSubAdminModal.tsx (Formik initialValues or useState)
const initialValues = {
  firstName:  "",
  lastName:   "",
  email:      "",
  phone:      "",
  password:   "",
  confirm:    "",
  permissions: [],      // leave as-is
  // nothing else needed here—Zod will let "billing" through in that array
};
No change here if you drive checkboxes off a single permissions: string[] array.

3. Render the “Billing” checkbox in the UI
File: src/components/CreateSubAdminModal.tsx (or wherever your two checkboxes live)
Add a third block directly under the existing “Accept Ticket” checkbox:

tsx
Copy
Edit
<div className="flex items-center space-x-2">
  <Checkbox
    id="billing"
    checked={field.value?.includes("billing")}
    onCheckedChange={checked => {
      const perms = field.value || [];
      if (checked) field.onChange([...perms, "billing"]);
      else        field.onChange(perms.filter(p => p !== "billing"));
    }}
  />
  <Label htmlFor="billing">Billing</Label>
</div>
Make sure you import Checkbox and Label at the top.

4. Include billing in your API payload
Wherever you serialize the form into your POST/GraphQL input (e.g. in your onSubmit handler), make sure you send the full permissions array:

ts
Copy
Edit
// e.g. axios.post("/api/sub-admins", { 
//   ...otherFields,
//   permissions: values.permissions, // now can include "billing"
// });
If you have a TypeScript type for that payload (e.g. InsertSubAdmin), add "billing" to its union:

ts
Copy
Edit
type Permission = "place_ticket" | "accept_ticket" | "billing";
5. (Optional) Back-end role mapping
Your back-end already handles "billing" (you said functionality’s ready), so no changes here—just verify your controller/service reads the billing flag and assigns the billing role.